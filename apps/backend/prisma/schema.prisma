generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum ProductCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  imageUrl  String?   @map("image_url")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Product {
  id            String           @id @default(uuid())
  name          String
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  categoryId    String           @map("category_id")
  description   String?
  price         Float
  slug          String           @unique
  images        ProductImage[]
  condition     ProductCondition
  sellerAddress String           @map("seller_address")
  user          User             @relation(fields: [sellerAddress], references: [walletAddress])
  category      Category         @relation(fields: [categoryId], references: [id])
  orders      Order[]
  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  imageUrl  String   @map("image_url")
  productId String   @map("product_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id])

  @@map("product_images")
}

model User {
  walletAddress    String    @id @map("wallet_address")
  name             String    @db.VarChar(20)
  surname          String    @db.VarChar(50)
  email            String    @unique @db.VarChar(150)
  telegramUsername String?   @map("telegram_username") @db.VarChar(50)
  country          String    @db.VarChar(100)
  isSeller         Boolean   @default(false) @map("is_seller")
  messages         Message[] @relation("UserMessages")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  Product          Product[]

  @@map("users")
}

model Message {
  id            String   @id @default(uuid())
  orderId       String   @map("order_id")
  senderAddress String   @map("sender_address")
  content       String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  order  Order @relation(fields: [orderId], references: [id])
  sender User  @relation("UserMessages", fields: [senderAddress], references: [walletAddress])

  @@map("messages")
}

enum OrderStatus {
  PENDING
  ON_DISPUTE
  FOR_REVIEW
  APPROVED
}

model Order {
  id            String @id @default(uuid())
  productId     String @map("product_id")
  buyerAddress  String @map("buyer_address")
  sellerAddress String @map("seller_address")
  escrowId      String @map("escrow_id")
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  messages      Message[]

  product        Product     @relation(fields: [productId], references: [id])

  @@map("orders")
}